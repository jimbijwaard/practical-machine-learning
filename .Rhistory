install.packages('neuralnet')
library("neuralnet")
traininginput <-  as.data.frame(runif(50, min=0, max=100))
View(traininginput)
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
View(trainingdata)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
View(testdata)
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
View(cleanoutput)
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
View(cleanoutput)
print(cleanoutput)
library("neuralnet")
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:100)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=100, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:100)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
View(trainingdata)
traininginput <-  as.data.frame(runif(1000, min=0, max=100000))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:100)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
install.packages('neuralnet')
install.packages("neuralnet")
library("neuralnet")
traininginput <-  as.data.frame(runif(1000, min=0, max=10000))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
View(traininginput)
traininginput <-  as.data.frame(runif(100, min=0, max=10000))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
traininginput <-  as.data.frame(runif(100, min=0, max=1000))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
View(traininginput)
View(trainingoutput)
View(trainingdata)
View(cleanoutput)
traininginput <-  as.data.frame(runif(100, min=0, max=100))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:100)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
traininginput <-  as.data.frame(runif(100, min=0, max=400))
trainingoutput <- sqrt(traininginput)
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
plot(net.sqrt)
testdata <- as.data.frame((1:20)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
ls(net.results)
print(net.results$net.result)
install.packages('neuralnet')
library("neuralnet")
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(100, min=0, max=900))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
install.packages("neuralnet")
install.packages("neuralnet")
sqrt(30)
sqrt(50)
sqrt(10)
source('~/.active-rstudio-document', echo=TRUE)
install.packages('RCurl')
install.packages('rjson')
library('RCurl')
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/78add9pa?apikey=63065de33b82c2ef4e3a8e0b93ce8442')
obj <- fromJSON(json)
print(obj)
df <- as.data.frame(obj)
View(df)
df <- as.data.frame(obj$collection1)
results = obj$results
df <- as.data.frame(obj$results)
9704/1213
View(df)
df <- as.matrix(obj$results, nrow=1213, ncol=8)
matrix <- as.matrix(obj$results, nrow=1213, ncol=8)
df = as.data.frame(matrix)
View(df)
matrix = as.matrix(obj$results, nrow=1213, ncol=8)
df_temp = as.data.frame(obj$results)
matrix = as.matrix(df_temp, nrow=1213, ncol=8)
df = as.data.frame(matrix)
View(df)
matrix = as.matrix(df_temp, nrow=1213, ncol=8)
View(matrix)
print(obj$results)
obj$results$collection1
df = as.data.frame(obj$results$collection1)
View(df)
collection = obj$results$collection1
length(collection)
df = as.data.frame(obj$results$collection1)
View(df)
for (i in 1:length){
return (data.frame(collection[i]$_artist_all.text, collection[i]$_artist_name.href, collection[i]$_artist_name.text, collection[i]$_artist_picture.href, collection[i]$_artist_picture.src, collection[i]$_artist_picture.alt, collection[i]$_artist_picture.text))
}
data = do.call(rbind, pblapply(collection, FUN = function(ARTIST) {
data.details = as.data.frame[ARTIST]
}
return data
data = do.call(rbind, pblapply(collection, FUN = function(ARTIST) {
data.details = as.data.frame[ARTIST]
}))
library('pblapply')
require(pbapply)    # Progress bars!!!
install.packages("pbappl\")
install.packages("pbapply")
require(pbapply)    # Progress bars!!!
json <- getURL('https://www.kimonolabs.com/api/78add9pa?apikey=63065de33b82c2ef4e3a8e0b93ce8442')
obj <- fromJSON(json)
print(obj)
collection = obj$results$collection1
data = do.call(rbind, pblapply(collection, FUN = function(ARTIST) {
data.details = as.data.frame[ARTIST]
}))
as.data.frame[ARTIST]
data = do.call(rbind, pblapply(collection, FUN = function(ARTIST) {
as.data.frame[ARTIST]
}))
data = do.call(rbind, pblapply(collection, FUN = function(artist) {
artist = collection[i]
print(artist)
}))
data = do.call(rbind, pblapply(collection, FUN = function(artist) {
a_artist = collection[artist]
print(a_artist)
}))
collection[1]
collection[[1]]
data = do.call(rbind, pblapply(collection, FUN = function(artist) {
a_artist = collection[[artist]]
print(a_artist)
}))
data = do.call(rbind, pblapply(collection, FUN = function(artist) {
a_artist = as.data.frame(collection[[artist]])
print(a_artist)
}))
a_artist = as.data.frame(collection[[artist]])
a_artist = as.data.frame(collection[[1]])
View(a_artist)
lenght = collection.length
lenght = length(collection)
data= matrix(ncol=8)
for (i in 1:length){
artist = as.data.frame(collection[[1]])
rbind(data,artist)
}
length = length(collection)
data = matrix(ncol=8)
for (i in 1:length){
artist = as.data.frame(collection[[1]])
rbind(data,artist)
}
View(artist)
artist = as.matrix(collection[[1]])
rbind(data,artist)
data = data.frame
artist = as.data.frame(collection[[1]])
rbind(data,artist)
data = data.frame()
artist = as.data.frame(collection[[1]])
rbind(data,artist)
data = rbind(data,artist)
for (i in 1:length){
artist = as.data.frame(collection[[i]])
data = rbind(data,artist)
}
View(data)
View(data)
data[1214]
data[1213]
data[1213,1]
data[1214,1]
data[1215,1]
data[1216,1]
library('RCurl')
library('rjson')
json <- getURL('https://www.kimonolabs.com/api/78add9pa?apikey=63065de33b82c2ef4e3a8e0b93ce8442')
obj <- fromJSON(json)
print(obj)
collection = obj$results$collection1
length = length(collection)
data = data.frame()
for (i in 1:length){
artist = as.data.frame(collection[[i]])
data = rbind(data,artist)
}
View(data)
library(caret)
library(randomForest)
df_train = read.csv('pml-training.csv', na.strings=c("NA","#DIV/0!",""))
df_test = read.csv('pml-testing.csv', na.strings=c("NA","#DIV/0!",""))
str(df_train)
str(df_test)
dependent_vars = c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell")
all_vars_train = c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "classe")
all_vars_test = c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "problem_id")
setwd("~/Dropbox (Bloom)/Training/Coursera - Practical Machine Learning")
setwd("~/Dropbox (Bloom)/Training/Coursera - Practical Machine Learning/CourseProject")
library(caret)
library(randomForest)
df_train = read.csv('pml-training.csv', na.strings=c("NA","#DIV/0!",""))
df_test = read.csv('pml-testing.csv', na.strings=c("NA","#DIV/0!",""))
str(df_train)
str(df_test)
dependent_vars = c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell")
all_vars_train = c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "classe")
all_vars_test = c("roll_belt", "pitch_belt", "yaw_belt", "total_accel_belt", "gyros_belt_x", "gyros_belt_y", "gyros_belt_z", "accel_belt_x", "accel_belt_y", "accel_belt_z", "magnet_belt_x", "magnet_belt_y", "magnet_belt_z", "roll_arm", "pitch_arm", "yaw_arm", "total_accel_arm", "gyros_arm_x", "gyros_arm_y", "gyros_arm_z", "accel_arm_x", "accel_arm_y", "accel_arm_z", "magnet_arm_x", "magnet_arm_y", "magnet_arm_z", "roll_dumbbell", "pitch_dumbbell", "yaw_dumbbell", "problem_id")
data_train = subset(df_train, select=all_vars_train)
data_test = subset(df_test, select=all_vars_test)
inTrain = createDataPartition(y=data_train$classe, p=0.7, list=F)
training = data_train[inTrain,]
testing  = data_train[-inTrain,]
RF = train(y=triaining$classe, x=training[,-30], method="rf",data=training)
RF = train(y=training$classe, x=training[,-30], method="rf",data=training)
RF = train(y=training$classe, x=training[,-30], method="rf", ntree=100)
RF = train(y=training$classe, x=training[,-30], method="rf", ntree=100, do.trace)
RF = train(y=training$classe, x=training[,-30], method="rf", do.trace=T)
RF = train(y=training$classe, x=training[,-30], method="rf", ntree=100, do.trace=T)
RF = train(y=training$classe, x=training[,-30], method="rf", mtry=2, ntree=100, do.trace=T)
warnings()
RF = train(y=training$classe, x=training[,-30], method="rf", tuneGrid = data.frame(mtry = 2), do.trace=T)
RF = train(y=training$classe, x=training[,-30], method="rf", tuneGrid = data.frame(mtry = 2), ntree=10)
predictRF = predict(RF, testing)
confusionMatrix(testing$classe, predictRF)
RF = train(y=training$classe, x=training[,-30], method="rf", tuneGrid = data.frame(mtry = 2), ntree=50)
predictRF = predict(RF, testing)
confusionMatrix(testing$classe, predictRF)
predictRF_ans = predict(RF, data_test)
